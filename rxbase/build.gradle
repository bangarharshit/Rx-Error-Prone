plugins {
    id "net.ltgt.errorprone" version "0.0.13"
    id "com.github.johnrengelman.shadow" version "2.0.1"
    id "com.github.johnrengelman.plugin-shadow" version "2.0.0"
    id "java"
}

// we use this config to get the path of the JDK 9 javac jar, to
// stick it in the bootclasspath when running tests
configurations.maybeCreate("epJavac")

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

configurations.all {
    resolutionStrategy {
        // Force needed, since:
        // a) There are newer versions of CF than the one we forked
        // b) It seems x.y.z-name < x.y.z for gradle dependency resolution purposes.
        force deps.build.checkerDataflow
    }
}

dependencies {
    compileOnly deps.apt.autoValue
    compileOnly deps.apt.autoService
    testCompile group: 'io.reactivex', name: 'rxjava', version: '1.3.4'
    testCompile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.1.7'

    compileOnly deps.build.errorProneCheckApi
    errorprone "com.google.errorprone:error_prone_core:2.1.1"
    compile deps.build.checkerDataflow

    errorprone deps.build.errorProneCore

    testCompile deps.test.junit
    testCompile(deps.build.errorProneTestHelpers) {
        exclude group: "junit", module: "junit"
    }
    testCompile deps.test.cfQual
    testCompile deps.test.inferAnnotations
    testCompile deps.apt.javaxInject
    testCompile deps.test.rxjava2

    epJavac deps.build.errorProneCheckApi
    epJavac deps.build.checkerDataflow
}

shadowJar {
    classifier = null
}
build.dependsOn shadowJar

javadoc {
    failOnError = false
}

compileJava {
    options.compilerArgs += ["-Xlint:unchecked", "-Werror"]
}

test {
    maxHeapSize = "1024m"
    jvmArgs "-Xbootclasspath/p:${configurations.epJavac.asPath}"
}

apply from: rootProject.file("gradle/gradle-mvn-push.gradle")

def configurePomForShadow(pom) {
    pom.scopeMappings.mappings.remove(project.configurations.compile)
    pom.scopeMappings.mappings.remove(project.configurations.runtime)
    pom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY, project.configurations.shadow, Conf2ScopeMappingContainer.COMPILE)
}

install {
    repositories.mavenInstaller {
        configurePomForShadow(pom)
    }
}
install.dependsOn shadowJar

uploadArchives {
    repositories.mavenDeployer {
        configurePomForShadow(pom)
    }
}
uploadArchives.dependsOn shadowJar
